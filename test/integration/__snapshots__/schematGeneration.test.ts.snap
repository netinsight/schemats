// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schemats generation integration testing mysql Basic generation 1`] = `
"
export namespace usersFields {
    export type char_col = string;
    export type nullable_char_col = string | null;
    export type text_col = string;
    export type nullable_text_col = string | null;
    export type tinytext_col = string;
    export type nullable_tinytext_col = string | null;
    export type mediumtext_col = string;
    export type nullable_mediumtext_col = string | null;
    export type longtext_col = string;
    export type nullable_longtext_col = string | null;
    export type time_col = string;
    export type nullable_time_col = string | null;
    export type geometry_col = string;
    export type nullable_geometry_col = string | null;
    export type integer_col = number;
    export type nullable_integer_col = number | null;
    export type int_col = number;
    export type nullable_int_col = number | null;
    export type smallint_col = number;
    export type nullable_smallint_col = number | null;
    export type mediumint_col = number;
    export type nullable_mediumint_col = number | null;
    export type bigint_col = number;
    export type nullable_bigint_col = number | null;
    export type double_col = number;
    export type nullable_double_col = number | null;
    export type decimal_col = number;
    export type nullable_decimal_col = number | null;
    export type numeric_col = number;
    export type nullable_numeric_col = number | null;
    export type float_col = number;
    export type nullable_float_col = number | null;
    export type year_col = number;
    export type nullable_year_col = number | null;
    export type tinyint_col = boolean;
    export type nullable_tinyint_col = boolean | null;
    export type date_col = Date;
    export type nullable_date_col = Date | null;
    export type datetime_col = Date;
    export type nullable_datetime_col = Date | null;
    export type timestamp_col = Date;

}

export interface users {
    char_col: usersFields.char_col;
    nullable_char_col: usersFields.nullable_char_col;
    text_col: usersFields.text_col;
    nullable_text_col: usersFields.nullable_text_col;
    tinytext_col: usersFields.tinytext_col;
    nullable_tinytext_col: usersFields.nullable_tinytext_col;
    mediumtext_col: usersFields.mediumtext_col;
    nullable_mediumtext_col: usersFields.nullable_mediumtext_col;
    longtext_col: usersFields.longtext_col;
    nullable_longtext_col: usersFields.nullable_longtext_col;
    time_col: usersFields.time_col;
    nullable_time_col: usersFields.nullable_time_col;
    geometry_col: usersFields.geometry_col;
    nullable_geometry_col: usersFields.nullable_geometry_col;
    integer_col: usersFields.integer_col;
    nullable_integer_col: usersFields.nullable_integer_col;
    int_col: usersFields.int_col;
    nullable_int_col: usersFields.nullable_int_col;
    smallint_col: usersFields.smallint_col;
    nullable_smallint_col: usersFields.nullable_smallint_col;
    mediumint_col: usersFields.mediumint_col;
    nullable_mediumint_col: usersFields.nullable_mediumint_col;
    bigint_col: usersFields.bigint_col;
    nullable_bigint_col: usersFields.nullable_bigint_col;
    double_col: usersFields.double_col;
    nullable_double_col: usersFields.nullable_double_col;
    decimal_col: usersFields.decimal_col;
    nullable_decimal_col: usersFields.nullable_decimal_col;
    numeric_col: usersFields.numeric_col;
    nullable_numeric_col: usersFields.nullable_numeric_col;
    float_col: usersFields.float_col;
    nullable_float_col: usersFields.nullable_float_col;
    year_col: usersFields.year_col;
    nullable_year_col: usersFields.nullable_year_col;
    tinyint_col: usersFields.tinyint_col;
    nullable_tinyint_col: usersFields.nullable_tinyint_col;
    date_col: usersFields.date_col;
    nullable_date_col: usersFields.nullable_date_col;
    datetime_col: usersFields.datetime_col;
    nullable_datetime_col: usersFields.nullable_datetime_col;
    timestamp_col: usersFields.timestamp_col;

}

export namespace user_enumsFields {

}

export interface user_enums {

}

export namespace packageFields {
    export type number_ = number;
    export type string_ = string;

}

export interface package_ {
    number: packageFields.number_;
    string: packageFields.string_;

}

interface DataTypes {
    string: string
    boolean: boolean
    Date: Date
    bigint: bigint
    number: number
    Object: Object
    "Array<string>": string[]
    "Array<bigint>": bigint[]
}

type DataType = DataTypes[keyof DataTypes]

export interface ColumnSpec<T extends DataType> {
    validate: (v: any) => boolean
    parse: (v: string) => T
    nullable: boolean
    type: keyof DataTypes
}

function validate<K extends keyof DataTypes>(type: K, nullable: boolean): ColumnSpec<DataTypes[K]> {
    const validators: {
        [t in keyof DataTypes]: (v: any) => boolean
    } = {
        string: (v: any) => typeof v == 'string',
        number: (v: any) => typeof v == 'number',
        bigint: (v: any) => typeof v == 'bigint',
        Date: (v: any) => Object.prototype.toString.call(v) == '[object Date]' && !isNaN(v),
        Object: (v: any) => typeof v == 'object' && !!v,
        boolean: (v: any) => typeof v == 'boolean',
        "Array<string>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'string'),
        "Array<bigint>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'bigint')
    }

    const parsers: {
        [t in keyof DataTypes]: (v: string) => DataTypes[t]
    } = {
        string: (v: string) => v,
        number: (v: string) => parseFloat(v),
        bigint: (v: string) => BigInt(v),
        Date: (v: string) => new Date(v),
        Object: (v: string) => JSON.parse(v),
        boolean: (v: string) => {
            if (v == 'true') {
                return true
            }
            if (v == 'false') {
                return false
            }
            throw new Error('Could not parse ' + v + ' as boolean')
        },
        "Array<string>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'string')) {
                throw new Error('String not parsable as string array')
            }
            return json as string[]
        },
        "Array<bigint>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'bigint')) {
                throw new Error('String not parsable as bigint array')
            }
            return json as bigint[]
        }
    }

    if (!(type in validators)) {
        throw new Error('Unsupported type: ' + type)
    }

    const validateFn = validators[type]

    const validate = (value: any) => {
        if (value === null) {
            return nullable
        }

        if (!validateFn) {
            return false
        }
        return validateFn(value)
    }

    const parse = parsers[type]
    return { validate, nullable, type, parse: parse as ColumnSpec<DataTypes[K]>['parse'] }
}
export const Validator = {
    users: {
        char_col: validate('string', false),
        nullable_char_col: validate('string', true),
        text_col: validate('string', false),
        nullable_text_col: validate('string', true),
        tinytext_col: validate('string', false),
        nullable_tinytext_col: validate('string', true),
        mediumtext_col: validate('string', false),
        nullable_mediumtext_col: validate('string', true),
        longtext_col: validate('string', false),
        nullable_longtext_col: validate('string', true),
        time_col: validate('string', false),
        nullable_time_col: validate('string', true),
        geometry_col: validate('string', false),
        nullable_geometry_col: validate('string', true),
        integer_col: validate('number', false),
        nullable_integer_col: validate('number', true),
        int_col: validate('number', false),
        nullable_int_col: validate('number', true),
        smallint_col: validate('number', false),
        nullable_smallint_col: validate('number', true),
        mediumint_col: validate('number', false),
        nullable_mediumint_col: validate('number', true),
        bigint_col: validate('number', false),
        nullable_bigint_col: validate('number', true),
        double_col: validate('number', false),
        nullable_double_col: validate('number', true),
        decimal_col: validate('number', false),
        nullable_decimal_col: validate('number', true),
        numeric_col: validate('number', false),
        nullable_numeric_col: validate('number', true),
        float_col: validate('number', false),
        nullable_float_col: validate('number', true),
        year_col: validate('number', false),
        nullable_year_col: validate('number', true),
        tinyint_col: validate('boolean', false),
        nullable_tinyint_col: validate('boolean', true),
        date_col: validate('Date', false),
        nullable_date_col: validate('Date', true),
        datetime_col: validate('Date', false),
        nullable_datetime_col: validate('Date', true),
        timestamp_col: validate('Date', false),
    },
    user_enums: {
    },
    package: {
        number: validate('number', false),
        string: validate('string', false),
    },
}
"
`;

exports[`schemats generation integration testing postgres Basic generation 1`] = `
"export type format_enum = 'html' | 'markdown' | 'text';
export type user_status_enum = 'active' | 'confirmed' | 'deleted' | 'pending' | 'suspended';

export namespace usersFields {
    export type email = string;
    export type id = bigint;
    export type pass_crypt = string;
    export type creation_time = Date;
    export type display_name = string;
    export type data_public = boolean;
    export type description = string;
    export type home_lat = number | null;
    export type home_lon = number | null;
    export type home_zoom = number | null;
    export type nearby = number | null;
    export type pass_salt = string | null;
    export type image_file_name = string | null;
    export type email_valid = boolean;
    export type new_email = string | null;
    export type creation_ip = string | null;
    export type languages = string | null;
    export type terms_agreed = Date | null;
    export type consider_pd = boolean;
    export type preferred_editor = string | null;
    export type terms_seen = boolean;
    export type auth_uid = string | null;
    export type image_fingerprint = string | null;
    export type changesets_count = number;
    export type traces_count = number;
    export type diary_entries_count = number;
    export type image_use_gravatar = boolean;
    export type image_content_type = string | null;
    export type auth_provider = string | null;
    export type uuid_column = string | null;
    export type number_ = number | null;
    export type string_ = string | null;
    export type money_col = number | null;
    export type char_col = string | null;
    export type time_col = string | null;
    export type inet_col = string | null;
    export type jsonb_col = Object | null;
    export type numeric_col = number | null;
    export type bytea_col = string | null;
    export type varchar_array_col = Array<string> | null;
    export type int8_array_col = Array<bigint> | null;
    export type uuid_array_col = Array<string> | null;
    export type text_array_col = Array<string> | null;
    export type bytea_array_col = Array<string> | null;
    export type real_col = number | null;
    export type double_col = number | null;
    export type time_with_tz = string | null;
    export type oid_col = number | null;
    export type interval_col = string | null;
    export type json_col = Object | null;
    export type date_col = Date | null;
    export type name_type_col = string | null;

}

export interface users {
    email: usersFields.email;
    id: usersFields.id;
    pass_crypt: usersFields.pass_crypt;
    creation_time: usersFields.creation_time;
    display_name: usersFields.display_name;
    data_public: usersFields.data_public;
    description: usersFields.description;
    home_lat: usersFields.home_lat;
    home_lon: usersFields.home_lon;
    home_zoom: usersFields.home_zoom;
    nearby: usersFields.nearby;
    pass_salt: usersFields.pass_salt;
    image_file_name: usersFields.image_file_name;
    email_valid: usersFields.email_valid;
    new_email: usersFields.new_email;
    creation_ip: usersFields.creation_ip;
    languages: usersFields.languages;
    terms_agreed: usersFields.terms_agreed;
    consider_pd: usersFields.consider_pd;
    preferred_editor: usersFields.preferred_editor;
    terms_seen: usersFields.terms_seen;
    auth_uid: usersFields.auth_uid;
    image_fingerprint: usersFields.image_fingerprint;
    changesets_count: usersFields.changesets_count;
    traces_count: usersFields.traces_count;
    diary_entries_count: usersFields.diary_entries_count;
    image_use_gravatar: usersFields.image_use_gravatar;
    image_content_type: usersFields.image_content_type;
    auth_provider: usersFields.auth_provider;
    uuid_column: usersFields.uuid_column;
    number: usersFields.number_;
    string: usersFields.string_;
    money_col: usersFields.money_col;
    char_col: usersFields.char_col;
    time_col: usersFields.time_col;
    inet_col: usersFields.inet_col;
    jsonb_col: usersFields.jsonb_col;
    numeric_col: usersFields.numeric_col;
    bytea_col: usersFields.bytea_col;
    varchar_array_col: usersFields.varchar_array_col;
    int8_array_col: usersFields.int8_array_col;
    uuid_array_col: usersFields.uuid_array_col;
    text_array_col: usersFields.text_array_col;
    bytea_array_col: usersFields.bytea_array_col;
    real_col: usersFields.real_col;
    double_col: usersFields.double_col;
    time_with_tz: usersFields.time_with_tz;
    oid_col: usersFields.oid_col;
    interval_col: usersFields.interval_col;
    json_col: usersFields.json_col;
    date_col: usersFields.date_col;
    name_type_col: usersFields.name_type_col;

}

interface DataTypes {
    string: string
    boolean: boolean
    Date: Date
    bigint: bigint
    number: number
    Object: Object
    "Array<string>": string[]
    "Array<bigint>": bigint[]
}

type DataType = DataTypes[keyof DataTypes]

export interface ColumnSpec<T extends DataType> {
    validate: (v: any) => boolean
    parse: (v: string) => T
    nullable: boolean
    type: keyof DataTypes
}

function validate<K extends keyof DataTypes>(type: K, nullable: boolean): ColumnSpec<DataTypes[K]> {
    const validators: {
        [t in keyof DataTypes]: (v: any) => boolean
    } = {
        string: (v: any) => typeof v == 'string',
        number: (v: any) => typeof v == 'number',
        bigint: (v: any) => typeof v == 'bigint',
        Date: (v: any) => Object.prototype.toString.call(v) == '[object Date]' && !isNaN(v),
        Object: (v: any) => typeof v == 'object' && !!v,
        boolean: (v: any) => typeof v == 'boolean',
        "Array<string>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'string'),
        "Array<bigint>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'bigint')
    }

    const parsers: {
        [t in keyof DataTypes]: (v: string) => DataTypes[t]
    } = {
        string: (v: string) => v,
        number: (v: string) => parseFloat(v),
        bigint: (v: string) => BigInt(v),
        Date: (v: string) => new Date(v),
        Object: (v: string) => JSON.parse(v),
        boolean: (v: string) => {
            if (v == 'true') {
                return true
            }
            if (v == 'false') {
                return false
            }
            throw new Error('Could not parse ' + v + ' as boolean')
        },
        "Array<string>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'string')) {
                throw new Error('String not parsable as string array')
            }
            return json as string[]
        },
        "Array<bigint>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'bigint')) {
                throw new Error('String not parsable as bigint array')
            }
            return json as bigint[]
        }
    }

    if (!(type in validators)) {
        throw new Error('Unsupported type: ' + type)
    }

    const validateFn = validators[type]

    const validate = (value: any) => {
        if (value === null) {
            return nullable
        }

        if (!validateFn) {
            return false
        }
        return validateFn(value)
    }

    const parse = parsers[type]
    return { validate, nullable, type, parse: parse as ColumnSpec<DataTypes[K]>['parse'] }
}
export const Validator = {
    users: {
        email: validate('string', false),
        id: validate('bigint', false),
        pass_crypt: validate('string', false),
        creation_time: validate('Date', false),
        display_name: validate('string', false),
        data_public: validate('boolean', false),
        description: validate('string', false),
        home_lat: validate('number', true),
        home_lon: validate('number', true),
        home_zoom: validate('number', true),
        nearby: validate('number', true),
        pass_salt: validate('string', true),
        image_file_name: validate('string', true),
        email_valid: validate('boolean', false),
        new_email: validate('string', true),
        creation_ip: validate('string', true),
        languages: validate('string', true),
        terms_agreed: validate('Date', true),
        consider_pd: validate('boolean', false),
        preferred_editor: validate('string', true),
        terms_seen: validate('boolean', false),
        auth_uid: validate('string', true),
        image_fingerprint: validate('string', true),
        changesets_count: validate('number', false),
        traces_count: validate('number', false),
        diary_entries_count: validate('number', false),
        image_use_gravatar: validate('boolean', false),
        image_content_type: validate('string', true),
        auth_provider: validate('string', true),
        uuid_column: validate('string', true),
        number: validate('number', true),
        string: validate('string', true),
        money_col: validate('number', true),
        char_col: validate('string', true),
        time_col: validate('string', true),
        inet_col: validate('string', true),
        jsonb_col: validate('Object', true),
        numeric_col: validate('number', true),
        bytea_col: validate('string', true),
        varchar_array_col: validate('Array<string>', true),
        int8_array_col: validate('Array<bigint>', true),
        uuid_array_col: validate('Array<string>', true),
        text_array_col: validate('Array<string>', true),
        bytea_array_col: validate('Array<string>', true),
        real_col: validate('number', true),
        double_col: validate('number', true),
        time_with_tz: validate('string', true),
        oid_col: validate('number', true),
        interval_col: validate('string', true),
        json_col: validate('Object', true),
        date_col: validate('Date', true),
        name_type_col: validate('string', true),
    },
}
"
`;

exports[`schemats generation integration testing postgres Camelcase generation 1`] = `
"export type FormatEnum = 'html' | 'markdown' | 'text';
export type UserStatusEnum = 'active' | 'confirmed' | 'deleted' | 'pending' | 'suspended';

export namespace UsersFields {
    export type email = string;
    export type id = bigint;
    export type passCrypt = string;
    export type creationTime = Date;
    export type displayName = string;
    export type dataPublic = boolean;
    export type description = string;
    export type homeLat = number | null;
    export type homeLon = number | null;
    export type homeZoom = number | null;
    export type nearby = number | null;
    export type passSalt = string | null;
    export type imageFileName = string | null;
    export type emailValid = boolean;
    export type newEmail = string | null;
    export type creationIp = string | null;
    export type languages = string | null;
    export type termsAgreed = Date | null;
    export type considerPd = boolean;
    export type preferredEditor = string | null;
    export type termsSeen = boolean;
    export type authUid = string | null;
    export type imageFingerprint = string | null;
    export type changesetsCount = number;
    export type tracesCount = number;
    export type diaryEntriesCount = number;
    export type imageUseGravatar = boolean;
    export type imageContentType = string | null;
    export type authProvider = string | null;
    export type uuidColumn = string | null;
    export type number_ = number | null;
    export type string_ = string | null;
    export type moneyCol = number | null;
    export type charCol = string | null;
    export type timeCol = string | null;
    export type inetCol = string | null;
    export type jsonbCol = Object | null;
    export type numericCol = number | null;
    export type byteaCol = string | null;
    export type varcharArrayCol = Array<string> | null;
    export type int8ArrayCol = Array<bigint> | null;
    export type uuidArrayCol = Array<string> | null;
    export type textArrayCol = Array<string> | null;
    export type byteaArrayCol = Array<string> | null;
    export type realCol = number | null;
    export type doubleCol = number | null;
    export type timeWithTz = string | null;
    export type oidCol = number | null;
    export type intervalCol = string | null;
    export type jsonCol = Object | null;
    export type dateCol = Date | null;
    export type nameTypeCol = string | null;

}

export interface Users {
    email: UsersFields.email;
    id: UsersFields.id;
    passCrypt: UsersFields.passCrypt;
    creationTime: UsersFields.creationTime;
    displayName: UsersFields.displayName;
    dataPublic: UsersFields.dataPublic;
    description: UsersFields.description;
    homeLat: UsersFields.homeLat;
    homeLon: UsersFields.homeLon;
    homeZoom: UsersFields.homeZoom;
    nearby: UsersFields.nearby;
    passSalt: UsersFields.passSalt;
    imageFileName: UsersFields.imageFileName;
    emailValid: UsersFields.emailValid;
    newEmail: UsersFields.newEmail;
    creationIp: UsersFields.creationIp;
    languages: UsersFields.languages;
    termsAgreed: UsersFields.termsAgreed;
    considerPd: UsersFields.considerPd;
    preferredEditor: UsersFields.preferredEditor;
    termsSeen: UsersFields.termsSeen;
    authUid: UsersFields.authUid;
    imageFingerprint: UsersFields.imageFingerprint;
    changesetsCount: UsersFields.changesetsCount;
    tracesCount: UsersFields.tracesCount;
    diaryEntriesCount: UsersFields.diaryEntriesCount;
    imageUseGravatar: UsersFields.imageUseGravatar;
    imageContentType: UsersFields.imageContentType;
    authProvider: UsersFields.authProvider;
    uuidColumn: UsersFields.uuidColumn;
    number: UsersFields.number_;
    string: UsersFields.string_;
    moneyCol: UsersFields.moneyCol;
    charCol: UsersFields.charCol;
    timeCol: UsersFields.timeCol;
    inetCol: UsersFields.inetCol;
    jsonbCol: UsersFields.jsonbCol;
    numericCol: UsersFields.numericCol;
    byteaCol: UsersFields.byteaCol;
    varcharArrayCol: UsersFields.varcharArrayCol;
    int8ArrayCol: UsersFields.int8ArrayCol;
    uuidArrayCol: UsersFields.uuidArrayCol;
    textArrayCol: UsersFields.textArrayCol;
    byteaArrayCol: UsersFields.byteaArrayCol;
    realCol: UsersFields.realCol;
    doubleCol: UsersFields.doubleCol;
    timeWithTz: UsersFields.timeWithTz;
    oidCol: UsersFields.oidCol;
    intervalCol: UsersFields.intervalCol;
    jsonCol: UsersFields.jsonCol;
    dateCol: UsersFields.dateCol;
    nameTypeCol: UsersFields.nameTypeCol;

}

interface DataTypes {
    string: string
    boolean: boolean
    Date: Date
    bigint: bigint
    number: number
    Object: Object
    "Array<string>": string[]
    "Array<bigint>": bigint[]
}

type DataType = DataTypes[keyof DataTypes]

export interface ColumnSpec<T extends DataType> {
    validate: (v: any) => boolean
    parse: (v: string) => T
    nullable: boolean
    type: keyof DataTypes
}

function validate<K extends keyof DataTypes>(type: K, nullable: boolean): ColumnSpec<DataTypes[K]> {
    const validators: {
        [t in keyof DataTypes]: (v: any) => boolean
    } = {
        string: (v: any) => typeof v == 'string',
        number: (v: any) => typeof v == 'number',
        bigint: (v: any) => typeof v == 'bigint',
        Date: (v: any) => Object.prototype.toString.call(v) == '[object Date]' && !isNaN(v),
        Object: (v: any) => typeof v == 'object' && !!v,
        boolean: (v: any) => typeof v == 'boolean',
        "Array<string>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'string'),
        "Array<bigint>": (v: any) => Array.isArray(v) && v.every(item => typeof item == 'bigint')
    }

    const parsers: {
        [t in keyof DataTypes]: (v: string) => DataTypes[t]
    } = {
        string: (v: string) => v,
        number: (v: string) => parseFloat(v),
        bigint: (v: string) => BigInt(v),
        Date: (v: string) => new Date(v),
        Object: (v: string) => JSON.parse(v),
        boolean: (v: string) => {
            if (v == 'true') {
                return true
            }
            if (v == 'false') {
                return false
            }
            throw new Error('Could not parse ' + v + ' as boolean')
        },
        "Array<string>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'string')) {
                throw new Error('String not parsable as string array')
            }
            return json as string[]
        },
        "Array<bigint>": (v: string) => {
            const json = JSON.parse(v)
            if (!Array.isArray(json) || json.some(item => typeof item != 'bigint')) {
                throw new Error('String not parsable as bigint array')
            }
            return json as bigint[]
        }
    }

    if (!(type in validators)) {
        throw new Error('Unsupported type: ' + type)
    }

    const validateFn = validators[type]

    const validate = (value: any) => {
        if (value === null) {
            return nullable
        }

        if (!validateFn) {
            return false
        }
        return validateFn(value)
    }

    const parse = parsers[type]
    return { validate, nullable, type, parse: parse as ColumnSpec<DataTypes[K]>['parse'] }
}
export const Validator = {
    Users: {
        email: validate('string', false),
        id: validate('bigint', false),
        pass_crypt: validate('string', false),
        creation_time: validate('Date', false),
        display_name: validate('string', false),
        data_public: validate('boolean', false),
        description: validate('string', false),
        home_lat: validate('number', true),
        home_lon: validate('number', true),
        home_zoom: validate('number', true),
        nearby: validate('number', true),
        pass_salt: validate('string', true),
        image_file_name: validate('string', true),
        email_valid: validate('boolean', false),
        new_email: validate('string', true),
        creation_ip: validate('string', true),
        languages: validate('string', true),
        terms_agreed: validate('Date', true),
        consider_pd: validate('boolean', false),
        preferred_editor: validate('string', true),
        terms_seen: validate('boolean', false),
        auth_uid: validate('string', true),
        image_fingerprint: validate('string', true),
        changesets_count: validate('number', false),
        traces_count: validate('number', false),
        diary_entries_count: validate('number', false),
        image_use_gravatar: validate('boolean', false),
        image_content_type: validate('string', true),
        auth_provider: validate('string', true),
        uuid_column: validate('string', true),
        number: validate('number', true),
        string: validate('string', true),
        money_col: validate('number', true),
        char_col: validate('string', true),
        time_col: validate('string', true),
        inet_col: validate('string', true),
        jsonb_col: validate('Object', true),
        numeric_col: validate('number', true),
        bytea_col: validate('string', true),
        varchar_array_col: validate('Array<string>', true),
        int8_array_col: validate('Array<bigint>', true),
        uuid_array_col: validate('Array<string>', true),
        text_array_col: validate('Array<string>', true),
        bytea_array_col: validate('Array<string>', true),
        real_col: validate('number', true),
        double_col: validate('number', true),
        time_with_tz: validate('string', true),
        oid_col: validate('number', true),
        interval_col: validate('string', true),
        json_col: validate('Object', true),
        date_col: validate('Date', true),
        name_type_col: validate('string', true),
    },
}
"
`;
